/* This file is part of SLICC (Specification Language for Implementing
   Cache Coherence), a component of the Multifacet GEMS (General
   Execution-driven Multiprocessor Simulator) software toolset
   originally developed at the University of Wisconsin-Madison.

   SLICC was originally developed by Milo Martin with substantial
   contributions from Daniel Sorin.

   Ruby was originally developed primarily by Milo Martin and Daniel
   Sorin with contributions from Ross Dickson, Carl Mauer, and Manoj
   Plakal.

   Substantial further development of Multifacet GEMS at the
   University of Wisconsin was performed by Alaa Alameldeen, Brad
   Beckmann, Ross Dickson, Pacia Harper, Milo Martin, Michael Marty,
   Carl Mauer, Kevin Moore, Manoj Plakal, Daniel Sorin, Min Xu, and
   Luke Yen.

   Additional development was performed at the University of
   Pennsylvania by Milo Martin.

   --------------------------------------------------------------------

   Copyright (C) 1999-2005 by Mark D. Hill and David A. Wood for the
   Wisconsin Multifacet Project.  Contact: gems@cs.wisc.edu
   http://www.cs.wisc.edu/gems/

   This file is based upon a pre-release version of Multifacet GEMS
   from 2004 and may also contain additional modifications and code
   Copyright (C) 2004-2007 by Milo Martin for the Penn Architecture
   and Compilers Group.  Contact: acg@lists.seas.upenn.edu
   http://www.cis.upenn.edu/acg/

   --------------------------------------------------------------------

   Multifacet GEMS is free software; you can redistribute it and/or
   modify it under the terms of version 2 of the GNU General Public
   License as published by the Free Software Foundation.  This 
   software comes with ABSOLUTELY NO WARRANTY.  For details see the 
   file LICENSE included with the distribution.
*/
// -----------------------------------------------------------------------------
//
//  This file is part of FeS2.
//
//  FeS2 is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  FeS2 is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with FeS2.  If not, see <http://www.gnu.org/licenses/>.
//
// -----------------------------------------------------------------------------

// Declarations of external types that are common to all protocols

// External Types
external_type(int, primitive="yes", default="0");
external_type(int64, primitive="yes", default="0");
external_type(bool, primitive="yes", default="false");
external_type(string, primitive="yes");
external_type(double, primitive="yes", default="0.0");
external_type(Time, primitive="yes", default="0");
external_type(Address);
external_type(DataBlock);
external_type(MessageBuffer, buffer="yes", inport="yes", outport="yes");
external_type(OutPort, primitive="yes");

external_type(InPort, primitive="yes") {
  bool isReady();
  void dequeue();
  void recycle();
  bool isEmpty();
}

external_type(NodeID, default="0");

external_type(Set, non_obj="yes") {
  void add(NodeID);
  void addSet(Set);
  void remove(NodeID);
  void removeSet(Set);
  void broadcast();
  void addRandom();
  void clear();
  int count();
  bool isElement(NodeID);
  bool isSuperset(Set);
  bool intersectionIsEmpty(Set);
  NodeID smallestElement();
} 

external_type(NetDest, non_obj="yes") {
  void add(MachineType, NodeID);
  void addSet(MachineType, Set);
  //  void addNetDest(NetDest);
  
  void remove(MachineType, NodeID);
  void removeSet(MachineType, Set);
  void removeNetDest(NetDest);

  void broadcast(MachineType);
  bool isElement(MachineType, NodeID);

  void clear();
  int count();
}

// AccessPermission
enumeration(AccessPermission, desc="...", default="AccessPermission_NotPresent") {
  Read_Only,  desc="Read Only";
  Read_Write, desc="Read/Write";
  Invalid,    desc="Invalid";
  NotPresent, desc="NotPresent";
}

// TesterStatus
enumeration(TesterStatus, desc="...") {
  Idle,            desc="Idle";
  Action_Pending,  desc="Action Pending";
  Ready,           desc="Ready";
  Check_Pending,   desc="Check Pending";
}

// RequestGeneratorStatus
enumeration(RequestGeneratorStatus, desc="...") {
  Thinking,        desc="Doing work between release and next acquire";
  Test_Pending,    desc="Test pending";
  Before_Swap,     desc="We're about to perform the swap";
  Swap_Pending,    desc="The swap used for test-and-send is pending";
  Holding,         desc="We are holding the lock performing the critical section";
  Release_Pending, desc="The write for the release is pending";
  Done,            desc="Done, waiting for end of run";
}

// LockStatus
enumeration(LockStatus, desc="...") {
  Unlocked,        desc="Lock is not held";
  Locked,          desc="Lock is held";
}

// SequencerStatus
enumeration(SequencerStatus, desc="...") {
  Idle,            desc="Idle";
  Pending,         desc="Pending";
}

enumeration(TransitionResult, desc="...") {
  Valid,         desc="Valid transition";
  ResourceStall, desc="Stalled due to insufficient resources";
  ProtocolStall, desc="Protocol specified stall";
}

// CacheRequestType
enumeration(CacheRequestType, desc="...", default="CacheRequestType_NULL") {
  LD,          desc="Load";
  ST,          desc="Store";
  ATOMIC,      desc="Atomic Load/Store";
  IFETCH,      desc="Instruction fetch";
  NULL,        desc="Invalid request type";
}

// MessageSizeType
enumeration(MessageSizeType, default="MessageSizeType_Undefined", desc="...") {
  Undefined,  desc="Undefined";
  Control,    desc="Control Message";
  Data,       desc="Data Message";
  Request_Control, desc="Request";
  Reissue_Control, desc="Reissued request";
  Response_Data, desc="data response";
  Response_Control, desc="non-data response";
  Writeback_Data, desc="Writeback data";
  Writeback_Control, desc="Writeback control";
  Forwarded_Control, desc="Forwarded control";
  Unblock_Control, desc="Unblock control";
  Persistent_Control, desc="Persistent request activation messages";
  Completion_Control, desc="Completion messages";
}

// AccessType
enumeration(AccessType, desc="...") {
  Read, desc="Reading from cache";
  Write, desc="Writing to cache";
}

// AccessModeType
enumeration(AccessModeType, default="AccessModeType_UserMode", desc="...") {
  SupervisorMode, desc="Supervisor mode";
  UserMode,       desc="User mode";
}

enumeration(PrefetchBit, default="PrefetchBit_No", desc="...") {
  No,  desc="No, not a prefetch";
  Yes, desc="Yes, a prefetch";
}

// CacheMsg
structure(CacheMsg, desc="...", interface="Message") {
  Address Address,           desc="Physical address for this request";
  CacheRequestType Type,     desc="Type of request (LD, ST, etc)";
  Address ProgramCounter,    desc="Program counter of the instruction that caused the miss";
  AccessModeType AccessMode, desc="user/supervisor access type";
  int Size,                  desc="size in bytes of access";
  PrefetchBit Prefetch,      desc="Is this a prefetch request";
}

void error(string msg);
void assert(bool condition);
int random(int number);
NodeID map_address_to_node(Address addr);
Time get_time();
Time zero_time();
int numberOfNodes();
int getAddThenMod(int addend1, int addend2, int modulus);
int time_to_int(Time time);
Time int_to_Time(int time);
Time getTimeModInt(Time time, int modulus);
Time getTimePlusInt(Time addend1, int addend2);
Time getTimeMinusTime(Time t1, Time t2);
void WARN_ERROR_TIME(Time time);

void profile_miss(CacheMsg msg, NodeID id);
void profile_token_retry(Address addr, AccessType type, int count);

external_type(PersistentTable) {
  void persistentRequestLock(Address, NodeID, AccessType);
  void persistentRequestUnlock(Address, NodeID);
  bool okToIssueStarving(Address);
  NodeID findSmallest(Address);
  AccessType typeOfSmallest(Address);
  void markEntries(Address);
  bool isLocked(Address);
}

external_type(Sequencer) {
  void readCallback(Address, DataBlock);
  void writeCallback(Address, DataBlock);
  void checkCoherence(Address);
}

Sequencer get_sequencer(NodeID node);

enumeration(DestPredType, "DestPredType_NUM", desc="...") {
  AlwaysUnicast, desc="AlwaysUnicast";
  TokenD, desc="TokenD";
  AlwaysBroadcast, desc="AlwaysBroadcast";
  TokenB, desc="TokenB";
  TokenNull, desc="TokenNull";
  Random, desc="Random";
  Owner, desc="Owner";
  BroadcastIfShared, desc="Broadcast-If-Shared";
  BroadcastCounter, desc="Broadcast Counter";
  Group, desc="Group";
  Counter, desc="Counter";
  OwnerBroadcast, desc="Owner/Broadcast Hybrid";
  OwnerGroup, desc="Owner/Group Hybrid";
  BandwidthAdaptive, desc="Bandwidth Adaptive";
}

// Network Topologies
enumeration(TopologyType, desc="...") {
  CROSSBAR, desc="Single switch crossbar";
  HIERARCHICAL_SWITCH, desc="Totally ordered hierarchical switched network";
  TORUS_2D, desc="2D torus using full switches";
}

enumeration(MemoryTransactionResult, desc="...") {
  Hit,           desc="request hit";
  Miss,          desc="request missed";
  Non_Stallable, desc="request non-stallable";
  Unhandled,     desc="request not handled by ruby";
  Not_Ready,     desc="not ready to handle";
  I_Replay,      desc="replay of I-Fetch";
  D_Replay,      desc="replay of Data access";
  A_Replay,      desc="replay of Atomic instruction";
}

enumeration(CacheRequestStatus, desc="Used by the SimicsProcessor class") {
  Invalid, desc="...";
  Queued, desc="...";
  Serving, desc="...";
  Done, desc="...";
}

external_type(Profiler);
external_type(Network);
external_type(Driver);
external_type(Tracer);

Profiler profiler;
Driver driver;
Network network;
Tracer tracer;
